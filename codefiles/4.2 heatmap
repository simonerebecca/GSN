// Live Datafeed met WebSockets
Een live datafeed zorgt ervoor dat nieuwe dreigingen of updates zonder herladen zichtbaar worden.

Backend: Flask met WebSocket Support
Installatie:
Voer de volgende commando's uit om Flask-SocketIO te installeren://

pip install flask-socketio eventlet

//Flask WebSocket Server://

from flask import Flask, jsonify
from flask_socketio import SocketIO
import random
import time

app = Flask(__name__)
socketio = SocketIO(app, cors_allowed_origins="*")

# Dummy dreigingsdata
threats = [
    {"id": 1, "type": "Cyberaanval", "location": "Amsterdam", "lat": 52.3676, "lng": 4.9041},
    {"id": 2, "type": "Terrorisme", "location": "Brussel", "lat": 50.8503, "lng": 4.3517},
    {"id": 3, "type": "Conflict", "location": "Kiev", "lat": 50.4501, "lng": 30.5234},
]

@app.route('/')
def index():
    return jsonify({"message": "WebSocket Server Running"})

# Real-time datafeed
@socketio.on('connect')
def send_threats():
    while True:
        # Simuleer een nieuwe dreiging
        new_threat = {
            "id": random.randint(4, 100),
            "type": random.choice(["Cyberaanval", "Terrorisme", "Conflict"]),
            "location": "Random City",
            "lat": random.uniform(40.0, 60.0),
            "lng": random.uniform(10.0, 30.0)
        }
        socketio.emit('new_threat', new_threat)
        time.sleep(5)  # Wacht 5 seconden voor nieuwe data

if __name__ == '__main__':
    socketio.run(app, debug=True)



//Frontend: Live Updates met React
Installatie WebSocket Client:
Voer dit uit://

npm install socket.io-client


//Live Updates Component: LiveThreats.jsx//
import React, { useEffect, useState } from "react";
import { MapContainer, TileLayer, Marker, Popup } from "react-leaflet";
import io from "socket.io-client";

const LiveThreats = () => {
  const [threats, setThreats] = useState([]);
  const socket = io("http://localhost:5000");

  useEffect(() => {
    socket.on("new_threat", (newThreat) => {
      setThreats((prevThreats) => [...prevThreats, newThreat]);
    });

    return () => socket.disconnect(); // Clean up
  }, [socket]);

  return (
    <MapContainer center={[52.3676, 4.9041]} zoom={5} style={{ height: "500px", width: "100%" }}>
      <TileLayer
        url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
        attribution='&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
      />
      {threats.map((threat) => (
        <Marker key={threat.id} position={[threat.lat, threat.lng]}>
          <Popup>
            <strong>{threat.type}</strong>
            <br />
            Locatie: {threat.location}
          </Popup>
        </Marker>
      ))}
    </MapContainer>
  );
};

export default LiveThreats;


//Met deze integraties heb je nu:

Een heatmap die de intensiteit van dreigingen visualiseert.
Een live datafeed die updates direct zichtbaar maakt.
