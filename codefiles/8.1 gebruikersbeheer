// Gebruikersbeheer
Flask Backend Aanpassingen
Endpoints voor Gebruikersbeheer
Voeg de volgende endpoints toe voor beheerders://

@app.route('/users', methods=['GET'])
@login_required
def get_users():
    if current_user.role != "admin":
        return jsonify({"message": "Toegang geweigerd"}), 403
    users = User.query.all()
    return jsonify([{
        "id": user.id,
        "username": user.username,
        "role": user.role
    } for user in users])

@app.route('/users/<int:user_id>', methods=['DELETE'])
@login_required
def delete_user(user_id):
    if current_user.role != "admin":
        return jsonify({"message": "Toegang geweigerd"}), 403
    user = User.query.get(user_id)
    if user:
        db.session.delete(user)
        db.session.commit()
        return jsonify({"message": "Gebruiker verwijderd"}), 200
    return jsonify({"message": "Gebruiker niet gevonden"}), 404

@app.route('/users/<int:user_id>', methods=['PUT'])
@login_required
def update_user_role(user_id):
    if current_user.role != "admin":
        return jsonify({"message": "Toegang geweigerd"}), 403
    data = request.json
    user = User.query.get(user_id)
    if user:
        user.role = data.get("role", user.role)
        db.session.commit()
        return jsonify({"message": "Gebruikersrol bijgewerkt"}), 200
    return jsonify({"message": "Gebruiker niet gevonden"}), 404


//React Frontend: Gebruikersbeheerpagina
Component: Gebruikersbeheer//

import React, { useEffect, useState } from "react";

const UserManagement = () => {
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetch("http://localhost:5000/users", {
      credentials: "include",
    })
      .then((response) => response.json())
      .then((data) => {
        setUsers(data);
        setLoading(false);
      })
      .catch((error) => console.error("Error fetching users:", error));
  }, []);

  const deleteUser = (id) => {
    fetch(`http://localhost:5000/users/${id}`, {
      method: "DELETE",
      credentials: "include",
    })
      .then((response) => response.json())
      .then(() => setUsers(users.filter((user) => user.id !== id)));
  };

  const updateUserRole = (id, role) => {
    fetch(`http://localhost:5000/users/${id}`, {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      credentials: "include",
      body: JSON.stringify({ role }),
    })
      .then((response) => response.json())
      .then((data) => {
        setUsers(
          users.map((user) =>
            user.id === id ? { ...user, role: role } : user
          )
        );
      });
  };

  if (loading) return <p>Gebruikers laden...</p>;

  return (
    <div>
      <h2>Gebruikersbeheer</h2>
      <table>
        <thead>
          <tr>
            <th>ID</th>
            <th>Gebruikersnaam</th>
            <th>Rol</th>
            <th>Acties</th>
          </tr>
        </thead>
        <tbody>
          {users.map((user) => (
            <tr key={user.id}>
              <td>{user.id}</td>
              <td>{user.username}</td>
              <td>
                <select
                  value={user.role}
                  onChange={(e) => updateUserRole(user.id, e.target.value)}
                >
                  <option value="user">Gebruiker</option>
                  <option value="admin">Beheerder</option>
                </select>
              </td>
              <td>
                <button onClick={() => deleteUser(user.id)}>Verwijder</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default UserManagement;

