//Rollen-gebaseerd Toegangsbeheer
Voor toegangsbeheer maken we gebruik van Flask-Login om gebruikersrollen (beheerder en gebruiker) te beheren.

Flask Backend: Configuratie
Installatie://

pip install flask-login

//Gebruikersmodel Toevoegen://

from flask_login import LoginManager, UserMixin, login_user, logout_user, current_user, login_required

login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = "login"

# Gebruikersmodel
class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(50), unique=True, nullable=False)
    password = db.Column(db.String(100), nullable=False)
    role = db.Column(db.String(20), default="user")  # 'admin' of 'user'

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

//Endpoints voor Authenticatie://

from flask import render_template, redirect, url_for, flash, session
from werkzeug.security import generate_password_hash, check_password_hash

# Registreren van een nieuwe gebruiker
@app.route('/register', methods=['POST'])
def register():
    data = request.json
    hashed_password = generate_password_hash(data['password'], method='sha256')
    new_user = User(username=data['username'], password=hashed_password, role=data.get('role', 'user'))
    db.session.add(new_user)
    db.session.commit()
    return jsonify({"message": "Gebruiker succesvol geregistreerd"}), 201

# Inloggen
@app.route('/login', methods=['POST'])
def login():
    data = request.json
    user = User.query.filter_by(username=data['username']).first()
    if user and check_password_hash(user.password, data['password']):
        login_user(user)
        return jsonify({"message": "Succesvol ingelogd"}), 200
    return jsonify({"message": "Ongeldige inloggegevens"}), 401

# Uitloggen
@app.route('/logout', methods=['GET'])
@login_required
def logout():
    logout_user()
    return jsonify({"message": "Succesvol uitgelogd"}), 200



//Frontend Aanpassingen
Inlogformulier (React):
Maak een eenvoudige inlogpagina.//

import React, { useState } from "react";

const Login = ({ onLogin }) => {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");

  const handleSubmit = (e) => {
    e.preventDefault();
    fetch("http://localhost:5000/login", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ username, password }),
    })
      .then((response) => response.json())
      .then((data) => {
        if (data.message === "Succesvol ingelogd") {
          onLogin();
        } else {
          alert(data.message);
        }
      });
  };

  return (
    <form onSubmit={handleSubmit}>
      <h2>Inloggen</h2>
      <input
        type="text"
        placeholder="Gebruikersnaam"
        value={username}
        onChange={(e) => setUsername(e.target.value)}
        required
      />
      <input
        type="password"
        placeholder="Wachtwoord"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
        required
      />
      <button type="submit">Inloggen</button>
    </form>
  );
};

export default Login;

//Dashboard Toegangscontrole
Controleer de rol van de gebruiker voor toegang.//

import React, { useState, useEffect } from "react";

const Dashboard = () => {
  const [user, setUser] = useState(null);

  useEffect(() => {
    fetch("http://localhost:5000/current-user", {
      credentials: "include",
    })
      .then((response) => response.json())
      .then((data) => setUser(data))
      .catch(() => setUser(null));
  }, []);

  if (!user) {
    return <p>U moet inloggen om toegang te krijgen.</p>;
  }

  return (
    <div>
      <h1>Veiligheidsdashboard</h1>
      {user.role === "admin" ? (
        <p>Welkom, beheerder! U heeft volledige toegang.</p>
      ) : (
        <p>Welkom, gebruiker! Uw toegang is beperkt.</p>
      )}
      {/* Rest van het dashboard */}
    </div>
  );
};

export default Dashboard;
