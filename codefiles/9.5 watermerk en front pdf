//Toevoegen van een Dynamisch Watermerk en Voorpagina aan het PDF-Rapport
Hier voegen we twee extra verbeteringen toe aan het PDF-rapport:

Dynamisch Watermerk: Een subtiele tekst ("Vertrouwelijk" of andere inhoud) als achtergrond op elke pagina.
Voorpagina: Een aparte introductiepagina met een titel, logo, en samenvatting van het rapport.
Aanpassingen in de Flask Backend
We passen de PDF-generatie verder aan om zowel een watermerk als een voorpagina te integreren.//



//Dynamisch Watermerk
Een watermerk wordt toegevoegd aan elke pagina met een semi-transparante tekst.

Voorpagina
De voorpagina bevat:

Titel: Titel van het rapport.
Logo: Het bedrijfslogo.
Samenvatting: Samenvatting of kernpunten van het rapport, bijvoorbeeld het totale aantal dreigingen.//

//Ge√ºpdatete PDF-code
Hier is de complete code met beide functionaliteiten://

from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Image, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.pdfgen import canvas
from io import BytesIO
import os
from datetime import datetime


class WatermarkCanvas(canvas.Canvas):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.pages = []

    def showPage(self):
        self.pages.append(dict(self.__dict__))
        self._startPage()

    def save(self):
        for page_num, page in enumerate(self.pages, start=1):
            self.__dict__.update(page)
            self.add_watermark()
            self.draw_page_number(page_num)
            super().showPage()
        super().save()

    def add_watermark(self):
        self.saveState()
        self.setFont("Helvetica", 50)
        self.setFillGray(0.9, 0.5)  # Lichtgrijs, semi-transparant
        self.translate(300, 400)
        self.rotate(45)
        self.drawCentredString(0, 0, "VERSTRENGD - VERTROUWELIJK")
        self.restoreState()

    def draw_page_number(self, page_num):
        self.setFont("Helvetica", 10)
        self.drawRightString(
            200 * mm, 10 * mm, f"Pagina {page_num}"
        )


@app.route('/stats/export/pdf', methods=['GET'])
@login_required
def export_stats_pdf():
    if current_user.role != "admin":
        return jsonify({"message": "Toegang geweigerd"}), 403

    buffer = BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=letter)
    elements = []

    # Voorpagina
    styles = getSampleStyleSheet()

    logo_path = os.path.join(app.root_path, 'static/images/logo.png')
    if os.path.exists(logo_path):
        img = Image(logo_path, width=150, height=75)
        elements.append(img)

    title = Paragraph("Dreigingsrapport - Statistieken", styles['Title'])
    elements.append(title)
    elements.append(Spacer(1, 20))

    summary = f"""
        Dit rapport bevat de nieuwste statistieken over dreigingen wereldwijd.
        Totale dreigingen gedetecteerd: {Threat.query.count()}.
        Raadpleeg de volgende pagina's voor details.
    """
    elements.append(Paragraph(summary, styles['Normal']))
    elements.append(Spacer(1, 40))

    signature_text = f"Rapport gegenereerd door: {current_user.username} op {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    signature = Paragraph(signature_text, styles['Italic'])
    elements.append(signature)

    elements.append(Spacer(1, 40))  # Ruimte tussen voorpagina en inhoud

    # Tabellenpagina
    threats = Threat.query.all()
    data = [["Type", "Locatie", "Prioriteit", "Tijd"]]
    for threat in threats:
        data.append([
            threat.type,
            threat.location,
            threat.priority,
            threat.timestamp.strftime('%Y-%m-%d %H:%M:%S')
        ])

    table = Table(data)
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
    ]))
    elements.append(table)

    # PDF genereren met watermerk en paginanummers
    doc.build(elements, canvasmaker=WatermarkCanvas)
    buffer.seek(0)

    response = make_response(buffer.getvalue())
    response.headers["Content-Disposition"] = "attachment; filename=dreigingenrapport.pdf"
    response.headers["Content-Type"] = "application/pdf"
    return response


//Wat is nieuw?
Watermerk:

"VERSTRENGD - VERTROUWELIJK" wordt in lichtgrijs en schuin op elke pagina weergegeven.
Voorpagina:

Bevat:
Logo: Links boven.
Titel: In grote letters.
Samenvatting: Kerninformatie van het rapport.
Ondertekening: Naam van de gebruiker en tijdstip.
Overzichtelijke opmaak:

Inhoud begint pas na de voorpagina.
Paginanummers blijven zichtbaar.
Resultaat
Een professioneel rapport met:
Voorpagina: Logo, titel, samenvatting en ondertekening.
Watermerk: Vertrouwelijke status op alle pagina's.
Paginanummers: Duidelijke nummering onderaan.
//
